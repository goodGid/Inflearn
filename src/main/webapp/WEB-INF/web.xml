<!DOCTYPE web-app PUBLIC
  "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
  "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app>
  <display-name>Archetype Created Web Application</display-name>

  <context-param>
    <param-name>contextClass</param-name>
    <param-value>org.springframework.web.context.support.AnnotationConfigWebApplicationContext</param-value>
  </context-param>

  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>be.goodgid.AppConfig</param-value>
  </context-param>


  <!--
  ContextLoaderListener가 만드는건
  Root WebApplicationContext다.

  그리고 DispatcherServlet가 만드는건
  Servlet WebApplicationContext이다.

  만약 DispatcherServlet가
  Servlet WebApplicationContext를 생성할 때
  ContextLoaderListener가 만든
  Root WebApplicationContext가 있으면
  Root WebApplicationContext를 부모 Context로 삼는다.

  Root WebApplicationContext는 AppConfig를 사용하고
  Servlet WebApplicationContext는 WebConfig를 사용한다.

  AppConfig는
  @ComponentScan(excludeFilters = @ComponentScan.Filter(Controller.class))
  WebConfig는
  @ComponentScan(useDefaultFilters = false, includeFilters = @ComponentScan.Filter(Controller.class))

  즉 app/hello라는 요청을 보내면
  Servlet WebApplicationContext는
  Controller만 Component Scan을 하고

  Service에 해당하는 Bean은
  Root WebApplicationContext에 등록이 되어있다.
  -->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>

  <!--
  DispatcherServlet가 만들어주는
  AnnotationConfigWebApplicationContext는
  WebConfig를 사용한다.
  -->
  <servlet>
    <servlet-name>app</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
      <param-name>contextClass</param-name>
      <param-value>org.springframework.web.context.support.AnnotationConfigWebApplicationContext</param-value>
    </init-param>
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>be.goodgid.WebConfig</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>app</servlet-name>
    <url-pattern>/app/*</url-pattern>
  </servlet-mapping>


  <!--
  만약 WebApplicationContext를
  나눠서 사용하지 않고
  (= 하나의 WebApplicationContext에 Service와 Controller 등을 다 Bean 등록)

  DispatcherServlet만 두어도 된다.
  그럴 경우엔 다음과 같이 하면 된다.
  1. web_2.xml으로 수정
    - ContextLoaderListener를 위한 설정들을 다 삭제.
  2. AppConfig 삭제
    - ContextLoaderListener에서 사용하는데
    - 어차피 ContextLoaderListener를 삭제하였기 때문에 불필요
  3. WebConfig_2를 사용
    - TO-BE : @ComponentScan(useDefaultFilters = false, includeFilters = @ComponentScan.Filter(Controller.class))
    - AS-IS : @ComponentScan
  -->

</web-app>
